---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/4/10 14:17
---
-- ip_counter.lua
local _M = {}
local RedisPool = require "redis_tool"
local http = require "resty.http"
local cjson = require "cjson"

local function format_number(count)
    if count >= 1000 then
        return string.format("%.1fk", count / 1000)
    else
        return tostring(count)
    end
end

local function getGeoIp(ip)

    local httpc = http.new()
    -- 设置连接超时和发送超时
    httpc:set_timeouts(1000, 1000, 3000) -- 连接超时，发送超时，读取超时（毫秒）
    -- 发送请求
    local url = 'https://api.vore.top/api/IPdata?ip='..ip
    local args = { ip = ip }
    --local body = ngx.encode_args(args) -- 把参数编码为请求体
    --ngx.say("body:",body)
    --ngx.say('uri: ', uri)
    local res, err = httpc:request_uri(url, {
        --body = body,
        ssl_verify=false,
        method = "GET",
        keepalive_timeout = 60000, -- keepalive超时时间
        keepalive_pool = 10        -- keepalive连接池大小
    })
    local belongingPlace = '';
    if not res then
        --ngx.say("Failed to request: ", err)
        --return
    else
        --ngx.say("Body: ", res.body)
        if res.status == 200 then
            -- 处理响应
            local body = cjson.decode(res.body)
            return body
        end
    end
end


function _M.print()
    local ip = ngx.var.remote_addr
    local uri = ngx.var.request_uri
    local host = ngx.var.host
    local red, err = RedisPool:new({ db_index = 0, host='8.134.198.255',port=6379,timeout=5,password='waef@aAdqwe123'})
    if not red then
        ngx.exit(ngx.HTTP_FORBIDDEN)
        return
    end
    local count= 0;
    -- 忽略对 /favicon.ico 的计数
    if uri ~= "/favicon.ico" then
        local res, err = red:incr('domain:'..host..':'..ip)
        if  res then
            count = res
        end

    end
    local formatted_count = format_number(count)
    local belongingPlace = ''
    local res, err = red:hmget('geoIp:'..ip,'o')
    if  res then
        belongingPlace = res
    else
        ngx.say("getGeoIp")
        local body = getGeoIp(ip)
        belongingPlace = body['adcode']['o']
        red:hmset('geoIp:'..ip,'o',belongingPlace)
        red:hmset('geoIp:'..ip,'p',body['adcode']['p'])
        red:hmset('geoIp:'..ip,'c',body['adcode']['p'])
    end

    ngx.say('<html>')
    ngx.say('<head><style>')
    ngx.say('body { font-size: 18px; }')
    ngx.say('.ip { color: red; }')
    ngx.say('.domain { color: darkorange; }')
    ngx.say('.uri { color: green; }')
    ngx.say('.method { color: blue; }')
    ngx.say('.useragent { color: purple; }')
    ngx.say('.pink-text {color: pink; font-size: 30px;}')
    ngx.say('.welcome {color: #9ACD32;; font-size: 50px;}')
    ngx.say('</style></head>')
    ngx.say('<body>')

    ngx.say('<p class="welcome">welcome</h1>')
    ngx.say('<p class="pink-text">you have been recorded</h1>')
    ngx.say('<p class="ip">Client IP: ', ngx.var.remote_addr, '</p>')
    ngx.say('<p>Number of visits: ', formatted_count, '</p>')
    ngx.say('<p class="domain">Host: ', host, '</p>')
    ngx.say('<p class="uri">Request URI: ', ngx.var.request_uri, '</p>')
    ngx.say('<p class="method">Request Method: ', ngx.var.request_method, '</p>')
    ngx.say('<p class="useragent">User-Agent: ', ngx.var.http_user_agent, '</p>')
    ngx.say('<p>Belonging Place: ', belongingPlace, '</p>')
    ngx.say('</body></html>')
end

return _M
