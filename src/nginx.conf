#user nginx nginx;
#worker_processes auto; #设置值和CPU核心数一致 8线程
worker_processes 8;
#error_log /usr/local/nginx/logs/nginx_error.log crit; #日志位置和日志级别
#pid /usr/local/nginx/nginx.pid;
#Specifies the value for maximum file descriptors that can be opened by this process.
worker_rlimit_nofile 65535; #设置一个 worker 进程所能打开的最多文件数量
events
{
  worker_connections 65535; # 每个工作进程可以处理的并发连接数
   use epoll; # 使用epoll事件模型
}
http
{
  include mime.types;
  default_type application/octet-stream;
  log_format main  '$remote_addr - $remote_user [$time_local] "$request" '
               '$status $body_bytes_sent "$http_referer" '
               '"$http_user_agent" $http_x_forwarded_for';

  charset UTF-8;

  server_names_hash_bucket_size 128;
  client_header_buffer_size 32k;
  large_client_header_buffers 4 32k;
  client_max_body_size 8m;

  sendfile on;
  tcp_nopush on;
  keepalive_timeout 60;
  keepalive_requests 100;
  tcp_nodelay on;
  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 4 64k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;
  gzip on;
  gzip_min_length 1k;
  gzip_buffers 4 16k;
  gzip_http_version 1.0;
  gzip_comp_level 2;
  gzip_types text/plain application/javascript text/css application/xml text/javascript image/jpeg image/gif image/png;
  gzip_disable "MSIE [1-6]\."; # 低版本的IE浏览器不支持压缩
  gzip_vary on;
  # 设置缓存
  proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=2g inactive=60m;
  lua_package_path 'test/?.lua;;lua-resty-kafka/lib/?.lua;;lua-resty-iputils/lib/?.lua;;lua-resty-jwt/lib/?.lua;;lua-resty-hmac/lib/?.lua;;ngx_lua_waf/?.lua;;';
    # 配置后端服务器，可以有多个
    upstream backend_server {
        server backend1.example.com;
        server backend2.example.com;
        server backend3.example.com;
    }
      server {
          listen       7777;
          server_name  localhost;
          default_type text/html;
          location = /favicon.ico {
              log_not_found off;
              access_log off;
          }

          location /pic {
            rewrite ^/test(.*)$ /$1 break;
            rewrite_by_lua_file lua/access.lua; #图片鉴权
            alias /mnt/shareFiles/;
            index  index.html;
          }

            # 在动静分离的location中开启防盗链机制
            location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css){
                # 最后面的值在上线前可配置为允许的域名地址
                valid_referers blocked 192.168.12.129;
                if ($invalid_referer) {
                    # 可以配置成返回一张禁止盗取的图片
                    # rewrite   ^/ http://xx.xx.com/NO.jpg;
                    # 也可直接返回403
                    return   403;
                }

                root   /soft/nginx/static_resources;
                expires 7d;
            }
                location / {
                                proxy_pass http://backend_server;

                                proxy_cache my_cache;
                                proxy_cache_valid 200 302 10m;
                                proxy_cache_valid 404      1m;

                                proxy_cache_bypass $http_upgrade;
                                proxy_no_cache $http_upgrade;

                                proxy_set_header Host $host;
                                proxy_set_header X-Real-IP $remote_addr;
                                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    }

      #黑名单
      #include blockip.conf;

}
