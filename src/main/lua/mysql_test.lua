---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/9/28 16:43
---
---
local MysqlPool = require "mysql_tool"
local RedisPool = require "redis_tool"
local cjson = require("cjson");
local success_response = {}
success_response["code"] = 200
success_response["message"] = "成功"
ngx.header.content_type = "application/json;charset=utf8"
-- 创建 Redis 连接
local red, err = RedisPool.new()
if not red then
    ngx.say("Failed to connect to Redis: ", err)
    return
end
local uri = ngx.var.uri
local args =ngx.var.args
if args == nil then
    args = ''
end
local redis_key = 'mysql_data:'..uri..":" .. args
local res, err = red:get(redis_key)
if res ~= ngx.null and res ~=nil then
    success_response["data"] = cjson.decode(res)
    ngx.say(cjson.encode(success_response))
    return
end
ngx.log(ngx.ERR, "get mysql db")
-- 创建数据库连接
local mysql, err = MysqlPool.new()
if not mysql then
    ngx.say("Failed to connect to the mysql_db: ", err)
    return
else
    local id = ngx.req.get_uri_args()["id"];
    ngx.log(ngx.ERR, 'id:', id)
    -- 执行查询
    local sql = [[SELECT * FROM cgb_loan limit 1]]
    --sql = string.format(sql, ngx.quote_sql_str(id))
    local res, err = mysql:query(sql)
    if not res then
        ngx.say("Failed to execute query: ", err)
    else
        --for i,rows in ipairs(res) do                                    -- 遍历结果集数组
        --    for k,v in pairs(rows) do                                   -- 逐个输出记录里的字段和值
        --        ngx.print(k, " = ", v, ";")
        --    end
        --end
        --for i,rows in ipairs(res) do                                    -- 遍历结果集数组
        --    ngx.print(cjson.encode(rows))
        --end
        local data = res
        --res, err = red:set(redis_key, cjson.encode(data))
        --res, err = red:expire(redis_key, 3600)
        success_response["data"] = data
        ----数据响应类型JSON
        ngx.say(cjson.encode(success_response))
        --ngx.log(ngx.ERR,"res type :",type(res))
        --local str = "';show table"                                      -- 可能有危险的 SQL 语句
        --ngx.say(ngx.quote_sql_str(str))                                 -- 转换为安全的字符串
        --ngx.say(  ndk.set_var.set_quote_sql_str(str))
        ---- 处理查询结果
        --for i, row in ipairs(res) do
        --    ngx.say("TYPE ",type(row))
        --    ngx.log(ngx.ERR,"row:",cjson.encode(row))
        --    ngx.log(ngx.ERR,"row concat:",table.concat(row))
        --    ngx.say("Row ", i, "role: ", row['role'])
        --    ngx.say("Row ", i, ": ", cjson.encode(row))
        --end
    end
end